<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="EMPLOYEE" >
  <resultMap id="BaseResultMap" type="Employee" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 29 16:50:22 CST 2015.
    -->
    <id column="EMP_ID" property="empId" jdbcType="DECIMAL" />
    <result column="EMP_NAME" property="empName" jdbcType="VARCHAR" />
    <result column="EMP_NUM" property="empNum" jdbcType="VARCHAR" />
    <result column="PASSWORD" property="password" jdbcType="VARCHAR" />
    <result column="GENDER" property="gender" jdbcType="DECIMAL" />
    <result column="BIRTHDAY" property="birthday" jdbcType="DATE" />
    <result column="DEPARTMENT_ID" property="departmentId" jdbcType="DECIMAL" />
    <result column="POSITION_ID" property="positionId" jdbcType="DECIMAL" />
    <result column="PHONE" property="phone" jdbcType="VARCHAR" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
    <result column="QQ" property="qq" jdbcType="VARCHAR" />
    <result column="INTRODUCTION" property="introduction" jdbcType="VARCHAR" />
  </resultMap>
  
  <!-- add new emp -->
  <insert id="insert" parameterType="Employee">
	insert into EMPLOYEE (EMP_ID, EMP_NAME, EMP_NUM, 
      PASSWORD, GENDER, BIRTHDAY, 
      DEPARTMENT_ID, POSITION_ID, PHONE, 
      EMAIL, QQ, INTRODUCTION
      )
    values (emp_seq.nextval, #{empName,jdbcType=VARCHAR}, #{empNum,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{gender,jdbcType=DECIMAL}, #{birthday,jdbcType=DATE}, 
      #{departmentId,jdbcType=DECIMAL}, #{positionId,jdbcType=DECIMAL}, #{phone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{introduction,jdbcType=VARCHAR}
      )
	</insert>
	
  <!-- edit emp info -->
  <update id="update" parameterType="Employee">
	update EMPLOYEE
    set
      EMP_NAME = #{empName,jdbcType=VARCHAR},
      EMP_NUM = #{empNum,jdbcType=VARCHAR},
      
      <if test="password != null and password != ''">
      	PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      
      GENDER = #{gender,jdbcType=DECIMAL},
      BIRTHDAY = #{birthday,jdbcType=DATE},
      DEPARTMENT_ID = #{departmentId,jdbcType=DECIMAL},
      POSITION_ID = #{positionId,jdbcType=DECIMAL},
      PHONE = #{phone,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      QQ = #{qq,jdbcType=VARCHAR},
      INTRODUCTION = #{introduction,jdbcType=VARCHAR}
     where  EMP_ID = #{empId,jdbcType=DECIMAL}
  </update>
	
  <update id="changePwd" parameterType="java.util.Map">
     update EMPLOYEE
    	set
     <if test="password != null and password != ''">
      	PASSWORD = #{password,jdbcType=VARCHAR}
     </if>
     where  EMP_ID = #{empId,jdbcType=DECIMAL}  
 </update>	
 
  <!-- delete emp -->
  <delete id="delete" parameterType="java.lang.Integer">
	delete from EMPLOYEE
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </delete>
	
  <!-- query emp by id -->
  <select id="queryById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		*
		from EMPLOYEE
		where EMP_ID = #{empId,jdbcType=DECIMAL}
  </select>

	<select id="query" resultType="java.util.Map" parameterType="java.util.Map">
		select * from (select rownum rnum,
		e.*,d.dept_name,p.pos_name,d.dept_id
		from employee e
		left outer join department d on e.department_id=d.dept_id
		left outer join position p on e.position_id=p.pos_id order by e.emp_id)
		where rnum between #{start} and #{end}
		
	</select>
  	
	<!-- 普通搜索 -->
  	<select id="queryByCondition" resultType="java.util.Map" parameterType="java.util.Map">
		select * from (select rownum
		rnum,e.* from employee e left outer join department d on d.dept_id = e.department_id
		<where>
			<if test="nameOrDept != null and nameOrDept != ''">    
				and emp_name like '%'||#{nameOrDept}||'%' or dept_name like '%'||#{nameOrDept}||'%'
			</if>
		</where>
		) where rnum between
		#{start} and #{end}
  	</select>

  <select id="getCount" resultType="java.lang.Integer">
		select
		count(*)
		from employee
  </select>
	
  	<select id="getConditionCount" resultType="java.lang.Integer" parameterType="java.util.Map">
		select
		count(*)
		from employee e left outer join department d on d.dept_id = e.department_id
		<where> 
			<if test="nameOrDept != null and nameOrDept != ''">    
				and emp_name like '%'||#{nameOrDept}||'%' or dept_name like '%'||#{nameOrDept}||'%'
			</if>
		</where>
  	</select>

	<!-- 获得主码 -->	
	<select id="getPrimaryKey" resultType="java.lang.Integer">
	    select emp_seq.currval from dual
	</select>
	
	<!-- 查询登录名是否重复 -->
	<select id="queryByEmpNum" resultMap="BaseResultMap" parameterType="java.lang.String">
	    select * from employee where emp_num=#{empNum,jdbcType=VARCHAR}
	</select>
	
	<!-- 查询今日生日 -->
	<select id="queryBirthday" resultMap="BaseResultMap">
	    select * from employee where TO_CHAR(birthday, 'MMDD') = TO_CHAR(SYSDATE, 'MMDD')
	</select>
	
	<!-- 增加角色 -->
	<insert id="addEmpRole" parameterType="java.util.Map">
	    insert into EMP_ROLE(ER,EMP_ID,ROLE_ID)
	    values (ER_SEQ.nextval,#{empId},#{roleId})
	</insert>
	<!-- 删除角色 -->
	<delete id="deleteEmpRole" parameterType="java.util.Map">
	    delete from EMP_ROLE
	    where emp_id=#{empId} and role_id=#{roleId}
	</delete>
	
	<!-- 通过员工得到部门名称 -->
	<select id="queryDeptByEmp" parameterType="java.lang.Integer" resultType="java.lang.String">
	    select d.dept_name
	    from employee e,department d
	    where e.department_id = d.dept_id and e.emp_id=#{empId}
	</select>
	
	<!-- 通过员工得到职务名称 -->
	<select id="queryPosByEmp" parameterType="java.lang.Integer" resultType="java.lang.String">
	    select p.pos_name
	    from employee e,position p
	    where e.position_id = p.pos_id and e.emp_id=#{empId}
	</select>
	
	<!-- 查询某个部门下所有员工 -->
	<select id="queryEmpByDept2" parameterType="java.lang.Integer" resultMap="BaseResultMap">
	    select * 
	    from employee
	    where department_id=#{deptId}
	</select>
	
	<!-- 查询某个部门下所有员工  扩充版-->
	<select id="queryEmpByDept" parameterType="java.util.Map" resultType="java.util.Map">
	    select * from (select rownum rnum, emp.emp_id, emp_name, d.dept_name, d.dept_id, p.pos_name
	    from employee emp 
	    left outer join department d on d.dept_id = emp.department_id
	    left outer join position p on p.pos_id = emp.position_id
	    where emp.department_id=#{deptId} order by emp.position_id asc) 
	    where rnum between #{start} and #{end}    
	</select>

	<!-- 分页版查询某部门下所有员工 -->
	<select id="queryEmpByDeptByPager" parameterType="java.util.Map" resultMap="BaseResultMap">
		select * from (select rownum
		rnum,e.*
		from employee e
		where e.department_id=#{deptId})
		where rnum between #{start} and #{end} 
	</select>
	
	<!-- 查询某部门员工总数 -->
	<select id="getEmpCountByDept" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select
		count(*)
		from employee
		where department_id=#{deptId}
	</select>
	
	<!-- 查询某个角色对应的员工 -->
	<select id="queryByRole" resultMap="BaseResultMap" parameterType="java.lang.Integer">
	    select * from employee e
	    inner join emp_role er on er.emp_id = e.emp_id
	    where er.role_id = #{roleId} 
	</select>
	
		
	<!-- 查询某部门的部门领导 -->
	<select id="queryDeptLeader" parameterType="java.lang.Integer" resultMap="BaseResultMap" >
	    select e.*
	    from employee e,emp_role er,role r
	    where e.emp_id=er.emp_id and er.role_id=r.role_id and e.department_id=#{deptId} and role_name='deptadmin'
	</select>
	
	<!-- 查询总经理 -->
	<select id="queryManager" resultMap="BaseResultMap">
	    select e.*
	    from employee e,emp_role er,role r
	    where e.emp_id=er.emp_id and er.role_id=r.role_id and role_name='manager'
	</select>
	
	<!-- 查询车队主管 -->
	<select id="queryCarAdmin" resultMap="BaseResultMap">
	    select e.*
	    from employee e,emp_role er,role r
	    where e.emp_id=er.emp_id and er.role_id=r.role_id and role_name='caradmin'
	</select>
	
	<!-- 查询行政 -->
	<select id="queryAdminstration" resultMap="BaseResultMap">
	    select e.*
	    from employee e,emp_role er,role r
	    where e.emp_id=er.emp_id and er.role_id=r.role_id and role_name='adminstration'
	</select>
	
	<!-- 查询出纳 -->
	<select id="queryMoney" resultMap="BaseResultMap">
	    select e.*
	    from employee e,emp_role er,role r
	    where e.emp_id=er.emp_id and er.role_id=r.role_id and role_name='money'
	</select>
	
</mapper>
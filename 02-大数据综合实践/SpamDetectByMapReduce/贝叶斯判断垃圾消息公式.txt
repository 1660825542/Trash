1.
	float computeWordHamPossibility(int wordHamNum) {

			// 计算贝叶斯分类概率，+1:拉普拉斯平滑处理
			float result = ((float) wordHamNum / (float) (hamNum + 1))
					* ((float) (hamNum + 1) / (float) (hamNum + spamNum + 1))
					/ (((float) wordHamNum + 1) / (float) (hamNum + spamNum + 1));
			// 返回计算结果
			return result;

		}
			
	解析：
	出现了该单词的消息为有效消息的概率比例

	=文章中有效单词个数/(有效消息条数+1) 
	* ((有效消息条数+1)/(垃圾消息条数+有效消息条数+1))
	/((有效消息条数+1)/(垃圾消息条数+有效消息条数+1))
	
2.
	float computeWordSpamPossibility(int wordSpamNum) {

			// 计算贝叶斯分类概率，+1:拉普拉斯平滑处理
			float result = ((float) wordSpamNum / (float) (spamNum + 1))
					* ((float) (spamNum + 1) / (float) (hamNum + spamNum + 1))
					/ (((float) wordSpamNum + 1) / (float) (hamNum + spamNum + 1));
			// 返回计算结果
			return result;

		}
		
	解析：
	出现了该单词的消息为垃圾消息的概率比例

	=文章中垃圾单词个数/(垃圾消息条数+1) 
	* ((垃圾消息条数+1)/(垃圾消息条数+有效消息条数+1))
	/((垃圾消息条数+1)/(垃圾消息条数+有效消息条数+1))
	
3.一条消息是有效消息的概率=该条消息中每个单词的有效概率乘积
4.一条消息是垃圾消息的概率=该条消息中每个单词的垃圾概率乘积
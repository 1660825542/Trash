MyBatis:是主流的ORMapping技术，将关系的操作转化成对象的操作。Hibernate
步骤：
1、导入jar包
2、配置MyBatis文件
	①、配置外部的属性文件
	②、POJO对象的简写（简化了映射文件的配置）
	③、MyBatis的运行环境
		A：事物管理器  （JDBC|MANAGED）
		B：配置数据源	（POOLED|UNPOOLED|JNDI）
	④、注册MyBatis的映射文件
3、创建POJO类，以及DAO接口&映射文件
4、JUnit（@Before  @Test  @After）


MyBatis常用标记
<select><update><delete><insert><sql><include><resultMap><if><choose><when><otherwise><where><set><trim><foreach>

Mybatis Generator（逆向工程）：
${}
#{}



一、什么是框架？（糖醋排骨）
一、Java中常用的设计模式：总体上来讲，设计模式不涉及到新的知识点，是前辈通过经验得出来用于解决特定问题的一段（多个类）的组合。
1、单例模式（singleton）（饿汉模式|懒汉模式）:
正常来讲，一个类的多个对象是不相等的，A a;  A b;   a不等b。而在单 例模式所创建出来的所有对象都是相等，即单一实例
要求：
①、类中的构造方法都必须全部是私有的
②、在类中创建一个静态私有的本类类型的对象
③、在类中定义公开的静态返回值是本类类型的方法


2、代理模式：代理模式实际上是为开发人员提供的一种对对象的访问方式，以代理的范式来控制对象的访问，（手机需要去经销商处购买。电话是你要访问的目标对象）
代理模式在什么场景下使用，比如在某些功能运行前需要做安全性检查（初始化），或者在这些功能执行完毕后需要完成一些日志处理|释放资源等收尾工作。

①、静态代理模式：
②、动态代理模式：java中cglib

代理模式：
①、定义目标对象
②、定义代理类（可以是单例的类）
③、在代理类中完成对目标方法的访问（在代理类中定义的方法和被代理的对象中的方法保持一致（不是必须的））


3、工厂模式，

4、资源池设计模式，实际上是对资源的一种管理方式，C3P0，是一种比较常见的利用资源池设计模式而实现的数据类库连接池技术
步骤：
1、导入c3p0jar包
	aopalliance-1.0.jar
	c3p0-0.9.1.jar
	hamcrest-core-1.3.jar
	junit-4.12.jar
	mysql-connector-java-5.1.22-bin.jar
	ojdbc14.jar
2、在类路径下创建C3P0的配置文件（xml|properties）
	<?xml version="1.0" encoding="UTF-8"?>
	<c3p0-config>
		<named-config name="oracle">
			<!-- 基本参数配置  -->
			<property name="driverClass">oracle.jdbc.driver.OracleDriver</property>
			<property name="jdbcUrl">jdbc:oracle:thin:@localhost:1521:orcl</property>
			<property name="user">scott</property>
			<property name="password">tiger</property>
			<!-- 配置额外参数 -->
			<!-- 当连接池中连接不够的时候 ，一次向数据库请求多少连接 -->
			<property name="acquireIncrement">10</property>
			<property name="initialPoolSize">10</property>
			<property name="minPoolSize">5</property>
			<property name="maxPoolSize">15</property> 
			<!-- 维护最大的 Statement的个数-->
			<property name="maxStatements">20</property>
			<!-- 每个连接可以维护的 Statement的个数-->
			<property name="maxStatementsPerConnection">5</property> 
		</named-config>
	</c3p0-config> 

3、利用ComboPooledDataSource对象从连接池中获取Connection对象
	public class ResourcesPooledTest {
	@Test
	public void c3p0() throws Exception{
		ComboPooledDataSource dataSource=new ComboPooledDataSource("oracle");
		Connection conn=dataSource.getConnection();
		Statement stmt=conn.createStatement();
		ResultSet rs=stmt.executeQuery("select * from emp");
		while(rs.next()){
			System.out.println(rs.getString(2));
		}
	}
	}






















